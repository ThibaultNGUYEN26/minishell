ls | wc -l > output.txt

_____________________________________________________________________________________

LEXER
|, > => TOKEN
ls, wc -l, output.txt => commande

_____________________________________________________________________________________

QUOTES
'<quelque chose>' peut importe ce qu'est <quelque chose> print as it is sans print '
"<truc>" print <truc> sans " mais si il y'a des '' dans des "" il faut les print"

_____________________________________________________________________________________

PARSER
debut => |
ls commande
| => >
wc -l commande
>
output.txt fichier

Apres une redirection -> check si 1 str apres != \ / : * ? < > |
sinon return error

conmand = ls
command = wc -l > output.txt

ls < infile1 > outfile1 < infile2 -la < infile3 > outfile3 | ls > outfile4 < infile4

typedef struct s_simple_cmds
{
	char                    **str;
	int                     (*builtin)(t_tools *, struct s_simple_cmds *);
	int                     num_redirections;
	char                    *hd_file_name;
	t_lexer                 *redirections;
	struct s_simple_cmds	*next;
	struct s_simple_cmds	*prev;
}	t_simple_cmds;

command :

ls -l | echo a > file

[[[ls] [-l]] [|] [[echo a] [>] [file]]]

split by | :
ls -l
echo a > file

check each command:
char ** = ls -l
builtin = NULL
redirection = NULL

char ** = echo a
builtin = echo
redirection = > file


_____________________________________________________________________________________

EXECUTEUR
ls
wc -l
> fichier

si fichier valide

BUILTINS

cd | echo | env | exit | export | pwd | unset